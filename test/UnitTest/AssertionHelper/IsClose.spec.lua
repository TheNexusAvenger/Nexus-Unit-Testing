--[[
TheNexusAvenger

Tests the IsClose helper function.
--]]
--!strict

local IsClose = require(game:GetService("ReplicatedStorage"):WaitForChild("NexusUnitTesting"):WaitForChild("UnitTest"):WaitForChild("AssertionHelper"):WaitForChild("IsClose"))

local function IsCloseFirstValueOnly<T>(Object1: T, Object2: T, Epsilon: number): string
    local Result, _ = IsClose.IsClose(Object1, Object2, Epsilon)
    return Result
end

local function IsCloseDataType<T>(Object1: T, Object2: T, Epsilon: number): (string, {string})
    local Result, NotCloseKeys = IsClose.IsClose(Object1, Object2, Epsilon)
    return Result, NotCloseKeys :: {string}
end

return function()
    describe("The IsClose function with numbers", function()
        it("should return that numbers are close.", function()
            expect(IsCloseFirstValueOnly(1, 1, 0.01)).to.equal("CLOSE")
            expect(IsCloseFirstValueOnly(1, 1.5, 1)).to.equal("CLOSE")
            expect(IsCloseFirstValueOnly(0.333, 1 / 3, 0.01)).to.equal("CLOSE")
        end)

        it("should return that numbers aren't close.", function()
            expect(IsCloseFirstValueOnly(1, 2, 0.01)).to.equal("NOT_CLOSE")
            expect(IsCloseFirstValueOnly(1, 3, 1)).to.equal("NOT_CLOSE")
            expect(IsCloseFirstValueOnly(0.1, 1 / 3, 0.01)).to.equal("NOT_CLOSE")
        end)
    end)

    describe("The IsClose function with invalid types", function()
        it("should return for mismatched types.", function()
            expect(IsCloseFirstValueOnly(1, "string" :: any, 0.1)).to.equal("DIFFERENT_TYPES")
        end)

        it("should return for nil objects.", function()
            expect(IsCloseFirstValueOnly(1, nil :: any, 0.1)).to.equal("DIFFERENT_TYPES")
            expect(IsCloseFirstValueOnly(nil, 1 :: any, 0.1)).to.equal("DIFFERENT_TYPES")
            expect(IsCloseFirstValueOnly(nil, nil, 0.1)).to.equal("UNSUPPORTED_TYPE")
        end)

        it("should return for unsupported types.", function()
            expect(IsCloseFirstValueOnly("Test1", "Test2", 0.1)).to.equal("UNSUPPORTED_TYPE")
        end)
    end)

    describe("The IsClose function with valid datatypes", function()
        it("should work with Vector2s.", function()
            local Result, NotCloseKeys = IsCloseDataType(Vector2.new(0, 0), Vector2.new(0, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(Vector2.new(0, 0), Vector2.new(0, 3), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(1)
            expect(NotCloseKeys[1]).to.equal("Y")
        end)

        it("should work with Vector3s.", function()
            local Result, NotCloseKeys = IsCloseDataType(Vector3.new(0, 0, 1), Vector3.new(0, 1, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(Vector3.new(0, 0, 1), Vector3.new(0, 3, 4), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("Y")
            expect(NotCloseKeys[2]).to.equal("Z")
        end)

        it("should work with CFrames.", function()
            local Result, NotCloseKeys = IsCloseDataType(CFrame.new(0, 0, 0), CFrame.new(0, 1, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(CFrame.new(0, 0, 0), CFrame.new(0, 0, 0) * CFrame.Angles(0, math.pi, 0), 0.1)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("R00")
            expect(NotCloseKeys[2]).to.equal("R22")
        end)

        it("should work with Rays.", function()
            local Result, NotCloseKeys = IsCloseDataType(Ray.new(Vector3.new(), Vector3.new(1, 1, 1)), Ray.new(Vector3.new(), Vector3.new(1, 1, 2)), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(Ray.new(Vector3.new(), Vector3.new(2, 1, 1)), Ray.new(Vector3.new(), Vector3.new(1, 4, 1)), 0.1)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("X1")
            expect(NotCloseKeys[2]).to.equal("Y1")
        end)

        it("should work with Region3s.", function()
            local Result, NotCloseKeys = IsCloseDataType(Region3.new(Vector3.new(), Vector3.new(1, 1, 1)), Region3.new(Vector3.new(), Vector3.new(1, 1, 2)), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(Region3.new(Vector3.new(), Vector3.new(2, 1, 1)), Region3.new(Vector3.new(), Vector3.new(1, 4, 1)), 0.1)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("MaxX")
            expect(NotCloseKeys[2]).to.equal("MaxY")
        end)

        it("should work with UDims.", function()
            local Result, NotCloseKeys = IsCloseDataType(UDim.new(0, 0), UDim.new(0, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(UDim.new(0, 0), UDim.new(0, 3), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(1)
            expect(NotCloseKeys[1]).to.equal("Offset")
        end)

        it("should work with UDims2.", function()
            local Result, NotCloseKeys = IsCloseDataType(UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(UDim2.new(0, 0, 1, 1), UDim2.new(0, 3, 5, 0), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("XOffset")
            expect(NotCloseKeys[2]).to.equal("YScale")
        end)

        it("should work with Color3s.", function()
            local Result, NotCloseKeys = IsCloseDataType(Color3.new(0, 0, 1), Color3.new(0, 1, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(Color3.new(0, 0, 1), Color3.new(0, 0.75, 0), 0.5)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("G")
            expect(NotCloseKeys[2]).to.equal("B")
        end)

        it("should work with ColorSequences.", function()
            local Result, NotCloseKeys = IsCloseDataType(ColorSequence.new(Color3.new(0, 0, 0), Color3.new(1, 1, 1)), ColorSequence.new(Color3.new(0, 1, 0), Color3.new(1, 0, 1)), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(ColorSequence.new(Color3.new(0, 0, 0), Color3.new(1, 1, 1)), ColorSequence.new(Color3.new(0, 1, 0), Color3.new(1, 1, 0)), 0.5)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("G0")
            expect(NotCloseKeys[2]).to.equal("B1")
            Result, NotCloseKeys = IsCloseDataType(ColorSequence.new(Color3.new(0, 0, 0), Color3.new(1, 1, 1)), ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)), ColorSequenceKeypoint.new(0.5, Color3.new(0, 1, 1)), ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))}), 0.25)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(6)
            expect(NotCloseKeys[1]).to.equal("Time1")
            expect(NotCloseKeys[2]).to.equal("R1")
            expect(NotCloseKeys[3]).to.equal("Time2")
            expect(NotCloseKeys[4]).to.equal("R2")
            expect(NotCloseKeys[5]).to.equal("G2")
            expect(NotCloseKeys[6]).to.equal("B2")
        end)

        it("should work with ColorSequenceKeypoints.", function()
            local Result, NotCloseKeys = IsCloseDataType(ColorSequenceKeypoint.new(0, Color3.new(0, 0, 1)), ColorSequenceKeypoint.new(0, Color3.new(0, 1, 1)), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(ColorSequenceKeypoint.new(0, Color3.new(0, 0, 1)), ColorSequenceKeypoint.new(1, Color3.new(0, 0.75, 1)), 0.5)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("Time")
            expect(NotCloseKeys[2]).to.equal("G")
        end)

        it("should work with NumberRanges.", function()
            local Result, NotCloseKeys = IsCloseDataType(NumberRange.new(0, 0), NumberRange.new(0, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(NumberRange.new(0, 0), NumberRange.new(0, 3), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(1)
            expect(NotCloseKeys[1]).to.equal("Max")
        end)

        it("should work with NumberSequences.", function()
            local Result, NotCloseKeys = IsCloseDataType(NumberSequence.new(0, 0), NumberSequence.new(0, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(NumberSequence.new(0, 0), NumberSequence.new(0, 3), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(1)
            expect(NotCloseKeys[1]).to.equal("Value1")
            Result, NotCloseKeys = IsCloseDataType(NumberSequence.new(0, 0), NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.5, 0), NumberSequenceKeypoint.new(1, 1)}), 0.25)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(4)
            expect(NotCloseKeys[1]).to.equal("Time1")
            expect(NotCloseKeys[2]).to.equal("Time2")
            expect(NotCloseKeys[3]).to.equal("Value2")
            expect(NotCloseKeys[4]).to.equal("Envelope2")
        end)

        it("should work with NumberSequenceKeypoints.", function()
            local Result, NotCloseKeys = IsCloseDataType(NumberSequenceKeypoint.new(0, 2, 1), NumberSequenceKeypoint.new(0, 1.5, 1.25), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(NumberSequenceKeypoint.new(0, 0, 0), NumberSequenceKeypoint.new(1, 1, 1), 0.5)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(3)
            expect(NotCloseKeys[1]).to.equal("Time")
            expect(NotCloseKeys[2]).to.equal("Value")
            expect(NotCloseKeys[3]).to.equal("Envelope")
        end)

        it("should work with Rect.", function()
            local Result, NotCloseKeys = IsCloseDataType(Rect.new(0, 0, 0, 0), Rect.new(0, 1, 0, 1), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(Rect.new(0, 0, 1, 1), Rect.new(0, 0, 5, 4), 2)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("MaxX")
            expect(NotCloseKeys[2]).to.equal("MaxY")
        end)

        it("should work with PhysicalProperties.", function()
            local Result, NotCloseKeys = IsCloseDataType(PhysicalProperties.new(0, 0, 0), PhysicalProperties.new(0, 1, 0), 2)
            expect(Result).to.equal("CLOSE")
            expect(#NotCloseKeys).to.equal(0)
            Result, NotCloseKeys = IsCloseDataType(PhysicalProperties.new(0, 0, 1), PhysicalProperties.new(0, 0.75, 0), 0.5)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#NotCloseKeys).to.equal(2)
            expect(NotCloseKeys[1]).to.equal("Friction")
            expect(NotCloseKeys[2]).to.equal("Elasticity")
        end)
    end)

    describe("The IsNotClose function", function()
        it("should not invert invalid results.", function()
            expect(IsCloseFirstValueOnly(1, nil :: any, 0.01)).to.equal("DIFFERENT_TYPES")
            expect(IsCloseFirstValueOnly("Test", "Test", 0.01)).to.equal("UNSUPPORTED_TYPE")
        end)

        it("should return correctly for numbers.", function()
            local Result, CloseKeys = IsClose.IsNotClose(1, 1, 0.1)
            expect(Result).to.equal("CLOSE")
            expect(CloseKeys).to.equal(nil)
            local Result, CloseKeys = IsClose.IsNotClose(1, 2, 0.1)
            expect(Result).to.equal("NOT_CLOSE")
            expect(CloseKeys).to.equal(nil)
        end)

        it("should return correctly for data types.", function()
            local Result, CloseKeys = IsClose.IsNotClose(Vector3.new(1, 1, 1), Vector3.new(1, 1, 1), 0.1)
            expect(Result).to.equal("CLOSE")
            expect(#(CloseKeys :: {string})).to.equal(3)
            expect((CloseKeys :: {string})[1]).to.equal("X")
            expect((CloseKeys :: {string})[2]).to.equal("Y")
            expect((CloseKeys :: {string})[3]).to.equal("Z")
            Result, CloseKeys = IsClose.IsNotClose(Vector3.new(1, 1, 1), Vector3.new(3, 2, 1), 0.1)
            expect(Result).to.equal("NOT_CLOSE")
            expect(#(CloseKeys :: {string})).to.equal(1)
            expect((CloseKeys :: {string})[1]).to.equal("Z")
        end)
    end)
end